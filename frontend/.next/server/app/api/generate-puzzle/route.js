/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
(() => {
var exports = {};
exports.id = "app/api/generate-puzzle/route";
exports.ids = ["app/api/generate-puzzle/route"];
exports.modules = {

/***/ "(rsc)/./app/api/generate-puzzle/route.js":
/*!******************************************!*\
  !*** ./app/api/generate-puzzle/route.js ***!
  \******************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   POST: () => (/* binding */ POST)\n/* harmony export */ });\n/* harmony import */ var next_server__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! next/server */ \"(rsc)/./node_modules/next/dist/api/server.js\");\n\n// Add your puzzle logic functions here (buildIndexedLetterMap, etc.)\nasync function POST(req) {\n    const { qnaList } = await req.json();\n    if (!Array.isArray(qnaList) || qnaList.length === 0) {\n        return next_server__WEBPACK_IMPORTED_MODULE_0__.NextResponse.json({\n            grid: [],\n            placedWords: []\n        }, {\n            status: 200\n        });\n    }\n    const words = qnaList.map((q)=>q.answer.toUpperCase());\n    // Insert your buildIndexedLetterMap, generateIndexedConnections, clusterWordsFromConnections, etc.\n    // Then use them here to generate your puzzle\n    // 🧠 Build indexed letter map function (new!)\n    function buildIndexedLetterMap(words) {\n        const map = {};\n        for (const word of words){\n            for(let i = 0; i < word.length; i++){\n                const letter = word[i];\n                if (!map[letter]) map[letter] = [];\n                map[letter].push({\n                    word,\n                    index: i\n                });\n            }\n        }\n        return map;\n    }\n    // 🔗 Build indexed connections from the indexed map\n    function generateIndexedConnections(indexedLetterMap) {\n        const connections = [];\n        for (const [letter, entries] of Object.entries(indexedLetterMap)){\n            for(let i = 0; i < entries.length; i++){\n                for(let j = 0; j < entries.length; j++){\n                    if (i === j) continue;\n                    const from = entries[i];\n                    const to = entries[j];\n                    if (from.word === to.word) continue; // ❌ skip same word\n                    connections.push({\n                        from: from.word,\n                        to: to.word,\n                        via: letter,\n                        fromIndex: from.index,\n                        toIndex: to.index\n                    });\n                }\n            }\n        }\n        return connections;\n    }\n    function clusterWordsFromConnections(words, connections) {\n        const graph = {};\n        for (const word of words){\n            graph[word] = new Set();\n        }\n        for (const conn of connections){\n            graph[conn.from].add(conn.to);\n            graph[conn.to].add(conn.from); // bi-directional\n        }\n        const visited = new Set();\n        const clusters = [];\n        for (const word of words){\n            if (visited.has(word)) continue;\n            const cluster = new Set();\n            const queue = [\n                word\n            ];\n            while(queue.length){\n                const current = queue.pop();\n                if (visited.has(current)) continue;\n                visited.add(current);\n                cluster.add(current);\n                for (const neighbor of graph[current]){\n                    if (!visited.has(neighbor)) {\n                        queue.push(neighbor);\n                    }\n                }\n            }\n            clusters.push(Array.from(cluster));\n        }\n        return clusters;\n    }\n    // build the puzzle\n    // find longest word length\n    const longestWordLength = Math.max(...qnaList.map((item)=>item.answer.length), 0);\n    // build the grid size base on double the length of the longest word\n    const gridSize = Math.max(10, longestWordLength * 3);\n    // build empty grid puzzle\n    const indexedLetterMap = buildIndexedLetterMap(words);\n    const allConnections = generateIndexedConnections(indexedLetterMap);\n    //console.log(\"🔗 All valid 2-word connections:\", allConnections);\n    // 🧠 Find clusters of connected words\n    const clusters = clusterWordsFromConnections(words, allConnections);\n    //console.log(\"🧩 Found clusters:\", clusters);\n    // Helper to generate mutations from connections\n    function generateMutationsFromConnections(cluster, allConnections) {\n        const mutations = []; // Store all valid mutation paths\n        const MAX_MUTATIONS = 10000;\n        function dfs(path, used, visitedSet) {\n            if (mutations.length >= MAX_MUTATIONS) return;\n            const lastWord = path[path.length - 1]; // Get the last word in the current path\n            if (path.length === cluster.length) {\n                mutations.push([\n                    ...path\n                ]); // Save a copy of the valid path\n                return; // Stop further recursion\n            }\n            for (const conn of allConnections){\n                if (conn.from === lastWord && // ✅ Must start from the current word\n                cluster.includes(conn.to) && // ✅ The target word must be in the cluster\n                !visitedSet.has(conn.to) // ✅ Make sure we haven’t used this word yet\n                ) {\n                    visitedSet.add(conn.to); // Mark the word as visited\n                    path.push(conn.to); // Add it to the current path\n                    dfs(path, used, visitedSet); // 🔁 Recurse deeper\n                    path.pop(); // 🧹 Backtrack: remove last word added\n                    visitedSet.delete(conn.to); // 🧹 Unmark word as visited\n                    if (mutations.length >= MAX_MUTATIONS) return; // short-circuit deeper\n                }\n            }\n        }\n        for (const startWord of cluster){\n            if (mutations.length >= MAX_MUTATIONS) break;\n            dfs([\n                startWord\n            ], new Set(), new Set([\n                startWord\n            ])); // 🔁 Start DFS from each word in the cluster\n        }\n        return mutations; // Return all generated mutation paths\n    }\n    function placeMutationToGrid(mutation, connections, gridSize, existingGrid = null, offset = null, placedSoFar = []) {\n        // 🧱 Create an empty grid of given size (2D array filled with nulls)\n        const grid = existingGrid ? existingGrid.map((row)=>[\n                ...row\n            ]) // 🧠 Clone to avoid mutation\n         : Array.from({\n            length: gridSize\n        }, ()=>Array(gridSize).fill(null));\n        // 📦 Track placed word info (word, direction, location, etc.)\n        const placedWords = [];\n        const usedAnswerIndices = new Set(); // ✅ TRACK used QnA indexes\n        let hasFallback = false;\n        // 🎯 Place the first word in the center, horizontally\n        const startRow = offset ? offset.row : Math.floor(gridSize / 2);\n        const startCol = offset ? offset.col : Math.floor((gridSize - mutation[0].length) / 2);\n        // 📝 Write the first word to the grid\n        for(let i = 0; i < mutation[0].length; i++){\n            grid[startRow][startCol + i] = mutation[0][i];\n        }\n        // 📌 Save the placement info for the first word\n        let firstIndex = -1;\n        for(let k = 0; k < qnaList.length; k++){\n            if (qnaList[k].answer.toUpperCase() === mutation[0] && !usedAnswerIndices.has(k)) {\n                firstIndex = k;\n                usedAnswerIndices.add(k);\n                break;\n            }\n        }\n        placedWords.push({\n            word: mutation[0],\n            direction: \"across\",\n            start: {\n                row: startRow,\n                col: startCol\n            },\n            index: firstIndex\n        });\n        // 🔁 Try placing all remaining words in the mutation\n        for(let i = 1; i < mutation.length; i++){\n            const word = mutation[i]; // current word to place\n            const prev = mutation[i - 1]; // previous word it connects to\n            // 🔗 Find all valid connections from prev → current word\n            const candidateConns = connections.filter((c)=>c.from === prev && c.to === word);\n            let placed = false;\n            // 🔁 Try each possible connection until one fits\n            for (const conn of candidateConns){\n                const prevPlaced = placedWords.find((p)=>p.word === conn.from);\n                if (!prevPlaced) continue;\n                if (placedWords.some((p)=>p.word === word) || placedSoFar.some((p)=>p.word === word)) continue;\n                // 🧠 Access how the previous word was connected before\n                const lastPlaced = placedWords.find((p)=>p.word === prevPlaced.word);\n                const lastToIndex = lastPlaced?.toIndex;\n                // 🚫 Enforce 1-block spacing (no direct reuse or adjacent)\n                if (lastToIndex !== undefined && (conn.fromIndex === lastToIndex || conn.fromIndex === lastToIndex - 1 || conn.fromIndex === lastToIndex + 1)) {\n                    continue; // ❌ Skip this connection — too close to last\n                }\n                const { row: pr, col: pc } = prevPlaced.start;\n                let newRow, newCol, direction;\n                if (prevPlaced.direction === \"across\") {\n                    // ↕ If previous was across, current goes down\n                    newRow = pr - conn.toIndex;\n                    newCol = pc + conn.fromIndex;\n                    direction = \"down\";\n                } else {\n                    // ↔ If previous was down, current goes across\n                    newRow = pr + conn.fromIndex;\n                    newCol = pc - conn.toIndex;\n                    direction = \"across\";\n                }\n                let fits = true; // 🟢 Assume the word fits unless proven otherwise\n                for(let k = 0; k < word.length; k++){\n                    // 🧮 Compute the row and column where this character will go\n                    const r = direction === \"across\" ? newRow : newRow + k; // If across, stay on same row; if down, move vertically\n                    const c = direction === \"across\" ? newCol + k : newCol; // If across, move horizontally; if down, stay in same column\n                    // 🚫 Check if the position is out of bounds\n                    if (r < 0 || r >= gridSize || c < 0 || c >= gridSize) {\n                        fits = false; // ❌ Mark as invalid\n                        break; // ⛔ Exit the loop early\n                    }\n                    const cell = grid[r][c]; // 📦 Get the current cell from the grid\n                    // 🚫 Check for letter conflict: cell is filled with a different letter\n                    if (cell && cell !== word[k]) {\n                        fits = false; // ❌ Mark as invalid\n                        break; // ⛔ Exit the loop early\n                    }\n                }\n                if (!fits) continue; // ❌ Try next connection\n                /// 🧱 Check the cell before the first letter and after the last letter\n                let endSafe = true; // ✅ Check if ends are clear\n                let sideSafe = true; // ✅ Check if side neighbors of first & last letters are clear\n                if (direction === \"across\") {\n                    const before = grid[newRow]?.[newCol - 1]; // ⬅️ Left of first letter\n                    const after = grid[newRow]?.[newCol + word.length]; // ➡️ Right of last letter\n                    if (before && before !== null || after && after !== null) {\n                        endSafe = false;\n                    }\n                    // 🔍 Check up/down of first letter (only if not connection point)\n                    if (conn.toIndex !== 0) {\n                        const up = grid[newRow - 1]?.[newCol];\n                        const down = grid[newRow + 1]?.[newCol];\n                        if (up && up !== null || down && down !== null) {\n                            sideSafe = false;\n                        }\n                    }\n                    // 🔍 Check up/down of last letter (only if not connection point)\n                    const lastCol = newCol + word.length - 1;\n                    if (conn.toIndex !== word.length - 1) {\n                        const up = grid[newRow - 1]?.[lastCol];\n                        const down = grid[newRow + 1]?.[lastCol];\n                        if (up && up !== null || down && down !== null) {\n                            sideSafe = false;\n                        }\n                    }\n                    // 🔁 Check up/down 1 block for all non-connecting letters (middle letters)\n                    for(let k = 0; k < word.length; k++){\n                        if (k === conn.toIndex) continue; // 🚫 Skip connection letter\n                        const r = newRow;\n                        const c = newCol + k;\n                        const up = grid[r - 1]?.[c];\n                        const down = grid[r + 1]?.[c];\n                        if (up && up !== null || down && down !== null) {\n                            sideSafe = false; // ❌ Letter has neighbors above/below\n                            break;\n                        }\n                    }\n                } else {\n                    const before = grid[newRow - 1]?.[newCol]; // ⬆️ Above first letter\n                    const after = grid[newRow + word.length]?.[newCol]; // ⬇️ Below last letter\n                    if (before && before !== null || after && after !== null) {\n                        endSafe = false;\n                    }\n                    // 🔍 Check left/right of first letter (only if not connection point)\n                    if (conn.toIndex !== 0) {\n                        const left = grid[newRow]?.[newCol - 1];\n                        const right = grid[newRow]?.[newCol + 1];\n                        if (left && left !== null || right && right !== null) {\n                            sideSafe = false;\n                        }\n                    }\n                    // 🔍 Check left/right of last letter (only if not connection point)\n                    const lastRow = newRow + word.length - 1;\n                    if (conn.toIndex !== word.length - 1) {\n                        const left = grid[lastRow]?.[newCol - 1];\n                        const right = grid[lastRow]?.[newCol + 1];\n                        if (left && left !== null || right && right !== null) {\n                            sideSafe = false;\n                        }\n                    }\n                    // 🔁 Check left/right 1 block for all non-connecting letters (middle letters)\n                    for(let k = 0; k < word.length; k++){\n                        if (k === conn.toIndex) continue; // 🚫 Skip connection letter\n                        const r = newRow + k;\n                        const c = newCol;\n                        const left = grid[r]?.[c - 1];\n                        const right = grid[r]?.[c + 1];\n                        if (left && left !== null || right && right !== null) {\n                            sideSafe = false; // ❌ Letter has neighbors left/right\n                            break;\n                        }\n                    }\n                }\n                // 🚫 Skip this connection if the ends or sides aren't safe\n                if (!endSafe || !sideSafe) continue;\n                // ✅ All checks passed – now place the word on the grid\n                for(let k = 0; k < word.length; k++){\n                    const r = direction === \"across\" ? newRow : newRow + k; // 🧮 Calculate row\n                    const c = direction === \"across\" ? newCol + k : newCol; // 🧮 Calculate column\n                    grid[r][c] = word[k]; // ✍️ Write the character to the grid\n                }\n                // 🔍 Find the original index of this word from qnaList\n                let foundIndex = -1;\n                for(let k = 0; k < qnaList.length; k++){\n                    if (qnaList[k].answer.toUpperCase() === word && !usedAnswerIndices.has(k)) {\n                        foundIndex = k;\n                        usedAnswerIndices.add(k); // ✅ Mark as used\n                        break;\n                    }\n                }\n                if (foundIndex === -1) continue; // 🔄 Skip if the word isn't found in the original list\n                // 📝 Save the word's placement info for rendering or exporting later\n                placedWords.push({\n                    word,\n                    direction,\n                    start: {\n                        row: newRow,\n                        col: newCol\n                    },\n                    index: foundIndex,\n                    mutationIndex: i,\n                    connectedFrom: conn.from,\n                    connectedTo: conn.to,\n                    fromIndex: conn.fromIndex,\n                    toIndex: conn.toIndex\n                });\n                placed = true;\n                break; // ✅ Done with this word\n            }\n            if (!placed) {\n                const fallbackWord = word;\n                hasFallback = true;\n                const usedShape = getUsedSize(grid);\n                const directions = usedShape.rows >= usedShape.cols ? [\n                    \"down\"\n                ] : [\n                    \"across\"\n                ];\n                for (const direction of directions){\n                    const centerRow = Math.floor(gridSize / 2);\n                    const centerCol = Math.floor(gridSize / 2);\n                    const rowOffsets = Array.from({\n                        length: gridSize\n                    }, (_, i)=>i - centerRow).sort((a, b)=>Math.abs(a) - Math.abs(b));\n                    const colOffsets = Array.from({\n                        length: gridSize\n                    }, (_, i)=>i - centerCol).sort((a, b)=>Math.abs(a) - Math.abs(b));\n                    for (const dr of rowOffsets){\n                        const row = centerRow + dr;\n                        if (row < 0 || row >= gridSize) continue;\n                        for (const dc of colOffsets){\n                            const col = centerCol + dc;\n                            if (col < 0 || col >= gridSize) continue;\n                            let fits = true;\n                            for(let k = 0; k < fallbackWord.length; k++){\n                                const r = direction === \"across\" ? row : row + k;\n                                const c = direction === \"across\" ? col + k : col;\n                                if (r < 0 || r >= gridSize || c < 0 || c >= gridSize) {\n                                    fits = false;\n                                    break;\n                                }\n                                if (grid[r][c] && grid[r][c] !== fallbackWord[k]) {\n                                    fits = false;\n                                    break;\n                                }\n                                const neighbors = [\n                                    [\n                                        r - 1,\n                                        c\n                                    ],\n                                    [\n                                        r + 1,\n                                        c\n                                    ],\n                                    [\n                                        r,\n                                        c - 1\n                                    ],\n                                    [\n                                        r,\n                                        c + 1\n                                    ],\n                                    [\n                                        r - 1,\n                                        c - 1\n                                    ],\n                                    [\n                                        r - 1,\n                                        c + 1\n                                    ],\n                                    [\n                                        r + 1,\n                                        c - 1\n                                    ],\n                                    [\n                                        r + 1,\n                                        c + 1\n                                    ]\n                                ];\n                                for (const [nr, nc] of neighbors){\n                                    if (nr >= 0 && nr < gridSize && nc >= 0 && nc < gridSize && grid[nr][nc] && grid[nr][nc] !== fallbackWord[k]) {\n                                        fits = false;\n                                        break;\n                                    }\n                                }\n                                if (!fits) break;\n                            }\n                            const beforeR = direction === \"across\" ? row : row - 1;\n                            const beforeC = direction === \"across\" ? col - 1 : col;\n                            const afterR = direction === \"across\" ? row : row + fallbackWord.length;\n                            const afterC = direction === \"across\" ? col + fallbackWord.length : col;\n                            if (grid[beforeR]?.[beforeC] || grid[afterR]?.[afterC]) continue;\n                            if (fits) {\n                                if (placed == true) {\n                                    break;\n                                }\n                                for(let k = 0; k < fallbackWord.length; k++){\n                                    const r = direction === \"across\" ? row : row + k;\n                                    const c = direction === \"across\" ? col + k : col;\n                                    grid[r][c] = fallbackWord[k];\n                                }\n                                let foundIndex = -1;\n                                for(let k = 0; k < qnaList.length; k++){\n                                    if (qnaList[k].answer.toUpperCase() === fallbackWord && !usedAnswerIndices.has(k)) {\n                                        foundIndex = k;\n                                        usedAnswerIndices.add(k);\n                                        break;\n                                    }\n                                }\n                                placedWords.push({\n                                    word: fallbackWord,\n                                    direction,\n                                    start: {\n                                        row,\n                                        col\n                                    },\n                                    index: foundIndex,\n                                    mutationIndex: i,\n                                    connectedFrom: null,\n                                    connectedTo: fallbackWord,\n                                    fromIndex: null,\n                                    toIndex: null\n                                });\n                                placed = true;\n                                break;\n                            }\n                        }\n                        if (placed) break;\n                    }\n                }\n                if (!placed) break;\n            }\n            if (!placed) break;\n        }\n        // ✅ Return the built grid and word placement info\n        return {\n            grid,\n            placedWords: placedSoFar.concat(placedWords),\n            hasFallback\n        };\n    }\n    // 🔁 Generate mutations for each cluster\n    const clusterMutations = clusters.map((cluster)=>{\n        const clusterWords = cluster;\n        const clusterConns = allConnections.filter((c)=>clusterWords.includes(c.from) && clusterWords.includes(c.to));\n        const mutations = generateMutationsFromConnections(clusterWords, clusterConns);\n        return {\n            cluster,\n            mutations\n        };\n    });\n    function getUsedSize(grid) {\n        let top = grid.length, bottom = 0, left = grid[0].length, right = 0;\n        for(let r = 0; r < grid.length; r++){\n            for(let c = 0; c < grid[0].length; c++){\n                if (grid[r][c]) {\n                    top = Math.min(top, r);\n                    bottom = Math.max(bottom, r);\n                    left = Math.min(left, c);\n                    right = Math.max(right, c);\n                }\n            }\n        }\n        return {\n            rows: bottom - top + 1,\n            cols: right - left + 1\n        };\n    }\n    function getNextClusterOffset(grid) {\n        let maxRow = 0;\n        for(let r = 0; r < grid.length; r++){\n            for(let c = 0; c < grid[0].length; c++){\n                if (grid[r][c]) {\n                    maxRow = Math.max(maxRow, r);\n                }\n            }\n        }\n        // Start new cluster 3 rows below the last used row\n        return {\n            row: maxRow + 3,\n            col: Math.floor(grid[0].length / 2)\n        };\n    }\n    // 🔁 Loop through all clusters' generated mutations\n    let combinedGrid = null;\n    let placedSoFar = [];\n    for (const { cluster, mutations } of clusterMutations){\n        let bestIsPerfect = false;\n        let bestPerfect = null;\n        const clusterConnections = allConnections.filter((c)=>cluster.includes(c.from) && cluster.includes(c.to));\n        let bestForCluster = null;\n        let bestArea = Infinity;\n        let attempts = 0;\n        for (const mutation of mutations){\n            if (attempts++ > 10000) break;\n            // Determine offset: center for first cluster, offset for next clusters\n            const offset = combinedGrid ? getNextClusterOffset(combinedGrid) : null;\n            const result = placeMutationToGrid(mutation, clusterConnections, gridSize, combinedGrid, offset, placedSoFar);\n            if (!result) continue;\n            const { grid, placedWords, hasFallback } = result;\n            const isPerfect = !hasFallback;\n            const used = getUsedSize(grid);\n            const area = used.rows * used.cols;\n            if (!bestForCluster) {\n                bestForCluster = {\n                    grid,\n                    placedWords\n                };\n                bestArea = area;\n                bestIsPerfect = isPerfect;\n                bestPerfect = isPerfect ? {\n                    grid,\n                    placedWords,\n                    area\n                } : null;\n            } else {\n                const isSmallerEnoughThanPerfect = bestPerfect && area < bestPerfect.area - 49; // 7x7 = 49\n                if (isPerfect) {\n                    if (!bestIsPerfect || area < bestPerfect.area) {\n                        bestPerfect = {\n                            grid,\n                            placedWords,\n                            area\n                        };\n                        bestForCluster = {\n                            grid,\n                            placedWords\n                        };\n                        bestArea = area;\n                        bestIsPerfect = true;\n                    }\n                } else if (!bestIsPerfect || isSmallerEnoughThanPerfect) {\n                    bestForCluster = {\n                        grid,\n                        placedWords\n                    };\n                    bestArea = area;\n                }\n            }\n        }\n        if (bestForCluster) {\n            combinedGrid = bestForCluster.grid;\n            placedSoFar = bestForCluster.placedWords;\n        }\n    }\n    function assignClueNumbers(placedWords) {\n        const clueMap = new Map(); // 🔐 Prevent duplicate clue numbers\n        let next = 1;\n        for (const word of placedWords){\n            const key = `${word.start.row},${word.start.col}`; // 📍 Identify start cell\n            if (!clueMap.has(key)) {\n                clueMap.set(key, next++); // 🆕 First time we see this start cell\n            }\n            word.clueNumber = clueMap.get(key); // 🧠 Share number for same cell\n        }\n    }\n    // ✅ Skip everything if no input, prevent crash at the beginning \n    if (qnaList.length === 0) {\n        return next_server__WEBPACK_IMPORTED_MODULE_0__.NextResponse.json({\n            grid: [],\n            placedWords: []\n        });\n    }\n    // assignClueNumbers(placedSoFar);\n    // 🔍 Filter out broken placements\n    const cleanedPlacedWords = placedSoFar.filter((w)=>w.start && w.direction && typeof w.index === \"number\");\n    assignClueNumbers(cleanedPlacedWords);\n    // 💡 Add this: reconstruct the answer for each placed word\n    for (const word of cleanedPlacedWords){\n        if (!word.answer) {\n            word.answer = qnaList[word.index]?.answer?.toUpperCase();\n        }\n    }\n    return next_server__WEBPACK_IMPORTED_MODULE_0__.NextResponse.json({\n        grid: combinedGrid || [],\n        placedWords: cleanedPlacedWords\n    });\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./app/api/generate-puzzle/route.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/next/dist/build/webpack/loaders/next-app-loader/index.js?name=app%2Fapi%2Fgenerate-puzzle%2Froute&page=%2Fapi%2Fgenerate-puzzle%2Froute&appPaths=&pagePath=private-next-app-dir%2Fapi%2Fgenerate-puzzle%2Froute.js&appDir=C%3A%5CUsers%5Canhvo%5CDesktop%5CHippoCampus%5Cfrontend%5Capp&pageExtensions=tsx&pageExtensions=ts&pageExtensions=jsx&pageExtensions=js&rootDir=C%3A%5CUsers%5Canhvo%5CDesktop%5CHippoCampus%5Cfrontend&isDev=true&tsconfigPath=tsconfig.json&basePath=&assetPrefix=&nextConfigOutput=&preferredRegion=&middlewareConfig=e30%3D!":

  !*** ./node_modules/next/dist/build/webpack/loaders/next-app-loader/index.js?name=app%2Fapi%2Fgenerate-puzzle%2Froute&page=%2Fapi%2Fgenerate-puzzle%2Froute&appPaths=&pagePath=private-next-app-dir%2Fapi%2Fgenerate-puzzle%2Froute.js&appDir=C%3A%5CUsers%5Canhvo%5CDesktop%5CHippoCampus%5Cfrontend%5Capp&pageExtensions=tsx&pageExtensions=ts&pageExtensions=jsx&pageExtensions=js&rootDir=C%3A%5CUsers%5Canhvo%5CDesktop%5CHippoCampus%5Cfrontend&isDev=true&tsconfigPath=tsconfig.json&basePath=&assetPrefix=&nextConfigOutput=&preferredRegion=&middlewareConfig=e30%3D! ***!

/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   patchFetch: () => (/* binding */ patchFetch),\n/* harmony export */   routeModule: () => (/* binding */ routeModule),\n/* harmony export */   serverHooks: () => (/* binding */ serverHooks),\n/* harmony export */   workAsyncStorage: () => (/* binding */ workAsyncStorage),\n/* harmony export */   workUnitAsyncStorage: () => (/* binding */ workUnitAsyncStorage)\n/* harmony export */ });\n/* harmony import */ var next_dist_server_route_modules_app_route_module_compiled__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! next/dist/server/route-modules/app-route/module.compiled */ \"(rsc)/./node_modules/next/dist/server/route-modules/app-route/module.compiled.js\");\n/* harmony import */ var next_dist_server_route_modules_app_route_module_compiled__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(next_dist_server_route_modules_app_route_module_compiled__WEBPACK_IMPORTED_MODULE_0__);\n/* harmony import */ var next_dist_server_route_kind__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! next/dist/server/route-kind */ \"(rsc)/./node_modules/next/dist/server/route-kind.js\");\n/* harmony import */ var next_dist_server_lib_patch_fetch__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! next/dist/server/lib/patch-fetch */ \"(rsc)/./node_modules/next/dist/server/lib/patch-fetch.js\");\n/* harmony import */ var next_dist_server_lib_patch_fetch__WEBPACK_IMPORTED_MODULE_2___default = /*#__PURE__*/__webpack_require__.n(next_dist_server_lib_patch_fetch__WEBPACK_IMPORTED_MODULE_2__);\n/* harmony import */ var C_Users_anhvo_Desktop_HippoCampus_frontend_app_api_generate_puzzle_route_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./app/api/generate-puzzle/route.js */ \"(rsc)/./app/api/generate-puzzle/route.js\");\n\n\n\n\n// We inject the nextConfigOutput here so that we can use them in the route\n// module.\nconst nextConfigOutput = \"\"\nconst routeModule = new next_dist_server_route_modules_app_route_module_compiled__WEBPACK_IMPORTED_MODULE_0__.AppRouteRouteModule({\n    definition: {\n        kind: next_dist_server_route_kind__WEBPACK_IMPORTED_MODULE_1__.RouteKind.APP_ROUTE,\n        page: \"/api/generate-puzzle/route\",\n        pathname: \"/api/generate-puzzle\",\n        filename: \"route\",\n        bundlePath: \"app/api/generate-puzzle/route\"\n    },\n    resolvedPagePath: \"C:\\\\Users\\\\anhvo\\\\Desktop\\\\HippoCampus\\\\frontend\\\\app\\\\api\\\\generate-puzzle\\\\route.js\",\n    nextConfigOutput,\n    userland: C_Users_anhvo_Desktop_HippoCampus_frontend_app_api_generate_puzzle_route_js__WEBPACK_IMPORTED_MODULE_3__\n});\n// Pull out the exports that we need to expose from the module. This should\n// be eliminated when we've moved the other routes to the new format. These\n// are used to hook into the route.\nconst { workAsyncStorage, workUnitAsyncStorage, serverHooks } = routeModule;\nfunction patchFetch() {\n    return (0,next_dist_server_lib_patch_fetch__WEBPACK_IMPORTED_MODULE_2__.patchFetch)({\n        workAsyncStorage,\n        workUnitAsyncStorage\n    });\n}\n\n\n//# sourceMappingURL=app-route.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvbmV4dC9kaXN0L2J1aWxkL3dlYnBhY2svbG9hZGVycy9uZXh0LWFwcC1sb2FkZXIvaW5kZXguanM/bmFtZT1hcHAlMkZhcGklMkZnZW5lcmF0ZS1wdXp6bGUlMkZyb3V0ZSZwYWdlPSUyRmFwaSUyRmdlbmVyYXRlLXB1enpsZSUyRnJvdXRlJmFwcFBhdGhzPSZwYWdlUGF0aD1wcml2YXRlLW5leHQtYXBwLWRpciUyRmFwaSUyRmdlbmVyYXRlLXB1enpsZSUyRnJvdXRlLmpzJmFwcERpcj1DJTNBJTVDVXNlcnMlNUNhbmh2byU1Q0Rlc2t0b3AlNUNIaXBwb0NhbXB1cyU1Q2Zyb250ZW5kJTVDYXBwJnBhZ2VFeHRlbnNpb25zPXRzeCZwYWdlRXh0ZW5zaW9ucz10cyZwYWdlRXh0ZW5zaW9ucz1qc3gmcGFnZUV4dGVuc2lvbnM9anMmcm9vdERpcj1DJTNBJTVDVXNlcnMlNUNhbmh2byU1Q0Rlc2t0b3AlNUNIaXBwb0NhbXB1cyU1Q2Zyb250ZW5kJmlzRGV2PXRydWUmdHNjb25maWdQYXRoPXRzY29uZmlnLmpzb24mYmFzZVBhdGg9JmFzc2V0UHJlZml4PSZuZXh0Q29uZmlnT3V0cHV0PSZwcmVmZXJyZWRSZWdpb249Jm1pZGRsZXdhcmVDb25maWc9ZTMwJTNEISIsIm1hcHBpbmdzIjoiOzs7Ozs7Ozs7Ozs7OztBQUErRjtBQUN2QztBQUNxQjtBQUNxQztBQUNsSDtBQUNBO0FBQ0E7QUFDQSx3QkFBd0IseUdBQW1CO0FBQzNDO0FBQ0EsY0FBYyxrRUFBUztBQUN2QjtBQUNBO0FBQ0E7QUFDQTtBQUNBLEtBQUs7QUFDTDtBQUNBO0FBQ0EsWUFBWTtBQUNaLENBQUM7QUFDRDtBQUNBO0FBQ0E7QUFDQSxRQUFRLHNEQUFzRDtBQUM5RDtBQUNBLFdBQVcsNEVBQVc7QUFDdEI7QUFDQTtBQUNBLEtBQUs7QUFDTDtBQUMwRjs7QUFFMUYiLCJzb3VyY2VzIjpbIiJdLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBBcHBSb3V0ZVJvdXRlTW9kdWxlIH0gZnJvbSBcIm5leHQvZGlzdC9zZXJ2ZXIvcm91dGUtbW9kdWxlcy9hcHAtcm91dGUvbW9kdWxlLmNvbXBpbGVkXCI7XG5pbXBvcnQgeyBSb3V0ZUtpbmQgfSBmcm9tIFwibmV4dC9kaXN0L3NlcnZlci9yb3V0ZS1raW5kXCI7XG5pbXBvcnQgeyBwYXRjaEZldGNoIGFzIF9wYXRjaEZldGNoIH0gZnJvbSBcIm5leHQvZGlzdC9zZXJ2ZXIvbGliL3BhdGNoLWZldGNoXCI7XG5pbXBvcnQgKiBhcyB1c2VybGFuZCBmcm9tIFwiQzpcXFxcVXNlcnNcXFxcYW5odm9cXFxcRGVza3RvcFxcXFxIaXBwb0NhbXB1c1xcXFxmcm9udGVuZFxcXFxhcHBcXFxcYXBpXFxcXGdlbmVyYXRlLXB1enpsZVxcXFxyb3V0ZS5qc1wiO1xuLy8gV2UgaW5qZWN0IHRoZSBuZXh0Q29uZmlnT3V0cHV0IGhlcmUgc28gdGhhdCB3ZSBjYW4gdXNlIHRoZW0gaW4gdGhlIHJvdXRlXG4vLyBtb2R1bGUuXG5jb25zdCBuZXh0Q29uZmlnT3V0cHV0ID0gXCJcIlxuY29uc3Qgcm91dGVNb2R1bGUgPSBuZXcgQXBwUm91dGVSb3V0ZU1vZHVsZSh7XG4gICAgZGVmaW5pdGlvbjoge1xuICAgICAgICBraW5kOiBSb3V0ZUtpbmQuQVBQX1JPVVRFLFxuICAgICAgICBwYWdlOiBcIi9hcGkvZ2VuZXJhdGUtcHV6emxlL3JvdXRlXCIsXG4gICAgICAgIHBhdGhuYW1lOiBcIi9hcGkvZ2VuZXJhdGUtcHV6emxlXCIsXG4gICAgICAgIGZpbGVuYW1lOiBcInJvdXRlXCIsXG4gICAgICAgIGJ1bmRsZVBhdGg6IFwiYXBwL2FwaS9nZW5lcmF0ZS1wdXp6bGUvcm91dGVcIlxuICAgIH0sXG4gICAgcmVzb2x2ZWRQYWdlUGF0aDogXCJDOlxcXFxVc2Vyc1xcXFxhbmh2b1xcXFxEZXNrdG9wXFxcXEhpcHBvQ2FtcHVzXFxcXGZyb250ZW5kXFxcXGFwcFxcXFxhcGlcXFxcZ2VuZXJhdGUtcHV6emxlXFxcXHJvdXRlLmpzXCIsXG4gICAgbmV4dENvbmZpZ091dHB1dCxcbiAgICB1c2VybGFuZFxufSk7XG4vLyBQdWxsIG91dCB0aGUgZXhwb3J0cyB0aGF0IHdlIG5lZWQgdG8gZXhwb3NlIGZyb20gdGhlIG1vZHVsZS4gVGhpcyBzaG91bGRcbi8vIGJlIGVsaW1pbmF0ZWQgd2hlbiB3ZSd2ZSBtb3ZlZCB0aGUgb3RoZXIgcm91dGVzIHRvIHRoZSBuZXcgZm9ybWF0LiBUaGVzZVxuLy8gYXJlIHVzZWQgdG8gaG9vayBpbnRvIHRoZSByb3V0ZS5cbmNvbnN0IHsgd29ya0FzeW5jU3RvcmFnZSwgd29ya1VuaXRBc3luY1N0b3JhZ2UsIHNlcnZlckhvb2tzIH0gPSByb3V0ZU1vZHVsZTtcbmZ1bmN0aW9uIHBhdGNoRmV0Y2goKSB7XG4gICAgcmV0dXJuIF9wYXRjaEZldGNoKHtcbiAgICAgICAgd29ya0FzeW5jU3RvcmFnZSxcbiAgICAgICAgd29ya1VuaXRBc3luY1N0b3JhZ2VcbiAgICB9KTtcbn1cbmV4cG9ydCB7IHJvdXRlTW9kdWxlLCB3b3JrQXN5bmNTdG9yYWdlLCB3b3JrVW5pdEFzeW5jU3RvcmFnZSwgc2VydmVySG9va3MsIHBhdGNoRmV0Y2gsICB9O1xuXG4vLyMgc291cmNlTWFwcGluZ1VSTD1hcHAtcm91dGUuanMubWFwIl0sIm5hbWVzIjpbXSwiaWdub3JlTGlzdCI6W10sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/next/dist/build/webpack/loaders/next-app-loader/index.js?name=app%2Fapi%2Fgenerate-puzzle%2Froute&page=%2Fapi%2Fgenerate-puzzle%2Froute&appPaths=&pagePath=private-next-app-dir%2Fapi%2Fgenerate-puzzle%2Froute.js&appDir=C%3A%5CUsers%5Canhvo%5CDesktop%5CHippoCampus%5Cfrontend%5Capp&pageExtensions=tsx&pageExtensions=ts&pageExtensions=jsx&pageExtensions=js&rootDir=C%3A%5CUsers%5Canhvo%5CDesktop%5CHippoCampus%5Cfrontend&isDev=true&tsconfigPath=tsconfig.json&basePath=&assetPrefix=&nextConfigOutput=&preferredRegion=&middlewareConfig=e30%3D!\n");

/***/ }),

/***/ "(rsc)/./node_modules/next/dist/build/webpack/loaders/next-flight-client-entry-loader.js?server=true!":
/*!******************************************************************************************************!*\
  !*** ./node_modules/next/dist/build/webpack/loaders/next-flight-client-entry-loader.js?server=true! ***!
  \******************************************************************************************************/
/***/ (() => {



/***/ }),

/***/ "(ssr)/./node_modules/next/dist/build/webpack/loaders/next-flight-client-entry-loader.js?server=true!":
/*!******************************************************************************************************!*\
  !*** ./node_modules/next/dist/build/webpack/loaders/next-flight-client-entry-loader.js?server=true! ***!
  \******************************************************************************************************/
/***/ (() => {



/***/ }),

/***/ "../app-render/after-task-async-storage.external":
/*!***********************************************************************************!*\
  !*** external "next/dist/server/app-render/after-task-async-storage.external.js" ***!
  \***********************************************************************************/
/***/ ((module) => {

"use strict";
module.exports = require("next/dist/server/app-render/after-task-async-storage.external.js");

/***/ }),

/***/ "../app-render/work-async-storage.external":
/*!*****************************************************************************!*\
  !*** external "next/dist/server/app-render/work-async-storage.external.js" ***!
  \*****************************************************************************/
/***/ ((module) => {

"use strict";
module.exports = require("next/dist/server/app-render/work-async-storage.external.js");

/***/ }),

/***/ "./work-unit-async-storage.external":
/*!**********************************************************************************!*\
  !*** external "next/dist/server/app-render/work-unit-async-storage.external.js" ***!
  \**********************************************************************************/
/***/ ((module) => {

"use strict";
module.exports = require("next/dist/server/app-render/work-unit-async-storage.external.js");

/***/ }),

/***/ "next/dist/compiled/next-server/app-page.runtime.dev.js":
/*!*************************************************************************!*\
  !*** external "next/dist/compiled/next-server/app-page.runtime.dev.js" ***!
  \*************************************************************************/
/***/ ((module) => {

"use strict";
module.exports = require("next/dist/compiled/next-server/app-page.runtime.dev.js");

/***/ }),

/***/ "next/dist/compiled/next-server/app-route.runtime.dev.js":
/*!**************************************************************************!*\
  !*** external "next/dist/compiled/next-server/app-route.runtime.dev.js" ***!
  \**************************************************************************/
/***/ ((module) => {

"use strict";
module.exports = require("next/dist/compiled/next-server/app-route.runtime.dev.js");

/***/ })

};
;

// load runtime
var __webpack_require__ = require("../../../webpack-runtime.js");
__webpack_require__.C(exports);
var __webpack_exec__ = (moduleId) => (__webpack_require__(__webpack_require__.s = moduleId))
var __webpack_exports__ = __webpack_require__.X(0, ["vendor-chunks/next"], () => (__webpack_exec__("(rsc)/./node_modules/next/dist/build/webpack/loaders/next-app-loader/index.js?name=app%2Fapi%2Fgenerate-puzzle%2Froute&page=%2Fapi%2Fgenerate-puzzle%2Froute&appPaths=&pagePath=private-next-app-dir%2Fapi%2Fgenerate-puzzle%2Froute.js&appDir=C%3A%5CUsers%5Canhvo%5CDesktop%5CHippoCampus%5Cfrontend%5Capp&pageExtensions=tsx&pageExtensions=ts&pageExtensions=jsx&pageExtensions=js&rootDir=C%3A%5CUsers%5Canhvo%5CDesktop%5CHippoCampus%5Cfrontend&isDev=true&tsconfigPath=tsconfig.json&basePath=&assetPrefix=&nextConfigOutput=&preferredRegion=&middlewareConfig=e30%3D!")));
module.exports = __webpack_exports__;

})();